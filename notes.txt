1. I made a testing script called test.sh which contains basic size checks for the input of the function. I can add more tests to this script later on.
- The makefile sets the permissions to the test script then runs it using make check. The script compiles all .c files in the directory

randall: *.c
	$(CC) $(CFLAGS) *.c -o $@

2. I then split the functions in randall.c into separate files, where each .c file had an associated header file. I then added the header files includes into randall.c
- Moved the number of bytes checker into options.c
- Moved all hardware functions, which were placed into rand64-hw.c, including cpuid and hardware functions for rand64
- Moved all software functions, which were placed into rand64-sw.c
- Moved the output function writebytes into output.c

4. I modified options.c to allow for arguent parsing. Used getopt to specify -i and -o options
- Used optind to get the number of input bytes. The number of bytes is at the end of the input string, so element at argv after the parsing returns nbytes
- Used a struct to keep track of the inputs and options

rrand 
- Added rrand option to options.c and the struct
- Added the option to randall.c which uses the normal rand64 randomization

lrand
- Added lrand option to options.c and the struct
- Added lrand randomization function to rand64-sw.c 
- Added lrand option to randall.c to use the lrand randomization
- Used valgrind to debug seg fault

/F option
- In options.c, added a source path to the struct when a / is encountered
- Added a new init function into the software file which opens the file given a path
- In the main file, I handled it by intializing the file, and using dev/random as the default if no file was present

5. Added the -o option to options.c
- Added output field to options struct
- Refactored the entire output logic into options.c by making a function which takes opt's properties and rand64() as parameters

Stdio
- Added the default stdio option to options.c for the output

N option
- Added a function called isNumber to verify the input is a number 
- Added block_size field to the struct to hold the block size for the N option
- I allocated a buffer, then populated the buffer with bytes of the random long longs from rand64()

Preparing for submission
- Updated makefile wiht additional files for submission

Test runs on lnxsrv15

Fast using /dev/urandom

time dd if=/dev/urandom ibs=8192 obs=8192 count=16384 >/dev/null
real    0m0.917s
user    0m0.019s
sys     0m0.890s

time ./randall -i /dev/urandom 133562368 >/dev/null
real    0m1.897s
user    0m0.941s
sys     0m0.929s

time ./randall -i /dev/urandom 133562368 | cat >/dev/null
real    0m2.007s
user    0m1.009s
sys     0m1.140s

time ./randall -i /dev/urandom 133562368 >rand.data
real    0m2.043s
user    0m0.931s
sys     0m1.040s

Slow using /dev/random. My code uses the default write_bytes for the stdio output, which writes bytes one at a time, so this is expected to be slow

time ./randall 133562368 >/dev/null
real    1m34.937s
user    0m2.132s
sys     1m7.126s

time ./randall 133562368 | cat >/dev/null
real    1m30.358s
user    0m2.132s
sys     1m7.119s

time ./randall 133562368 >rand.data
real    1m34.859s
user    0m1.876s
sys     1m7.024s


