1. I made a testing script called test.sh which contains basic size checks for the input of the function. I can add more tests to this script later on.
- The makefile sets the permissions to the test script then runs it using make check. The script compiles all .c files in the directory

randall: *.c
	$(CC) $(CFLAGS) *.c -o $@

2. I then split the functions in randall.c into separate files, where each .c file had an associated header file. I then added the header files includes into randall.c
- Moved the number of bytes checker into options.c
- Moved all hardware functions, which were placed into rand64-hw.c, including cpuid and hardware functions for rand64
- Moved all software functions, which were placed into rand64-sw.c
- Moved the output function writebytes into output.c

4. I modified options.c to allow for arguent parsing. Used getopt to specify -i and -o options
- Used optind to get the number of input bytes. The number of bytes is at the end of the input string, so element at argv after the parsing returns nbytes
- Used a struct to keep track of the inputs and options

rrand 
- Added rrand option to options.c and the struct
- Added the option to randall.c which uses the normal rand64 randomization

lrand
- Added lrand option to options.c and the struct
- Added lrand randomization function to rand64-sw.c 
- Added lrand option to randall.c to use the lrand randomization

/F option
- In options.c, added a source path to the struct when a / is encountered
- Added a new init function into the software file which opens the file given a path
- In the main file, I handled it by intializing the file, and using dev/random as the default if no file was present

5. Added the -o option to options.c
- Added output field to options struct

Stdio
- Added the default stdio option to options.c for the output
- Added 

N option
- Added a function called isNumber to verify the input is a number 
- Added block_size field to the struct to hold the block size for the N option
- In randall.c, I allocated a buffer, then populated the buffer with bytes of the random long longs from rand64()


